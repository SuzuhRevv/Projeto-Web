import Head from 'next/head';
import type { InferGetStaticPropsType, GetStaticProps, GetStaticPaths } from 'next';
import { createClient } from '../prismicio';
import { Content } from '@prismicio/client';
import { SliceZone } from '@prismicio/react';
import { components } from '@/slices';

type PostProps = InferGetStaticPropsType<typeof getStaticProps>;

export default function Post({ post }: PostProps) {
  return (
    <>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className='underline'>
          <div className='slices'>
            <SliceZone slices={post.data.slices} components={components} />
          </div>
        </div>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps<{ post: Content.PostDocument }> = async ({ params }) => {
  const UID = params?.uid as string;

  const client = createClient();

  const post = await client.getByUID('post', UID, {
    fetchLinks: ['author.author_name', 'author.author_image'],
  });

  return {
    props: {
      post,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const client = createClient();

  const posts = await client.getByType('post', {
    pageSize: 10,
    page: 1,
  });

  return {
    paths: posts.results.map((post) => ({
      params: {
        uid: post.uid,
      },
    })),
    fallback: 'blocking',
  };
};
